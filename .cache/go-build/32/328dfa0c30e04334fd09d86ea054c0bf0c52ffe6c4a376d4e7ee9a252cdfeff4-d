// Code generated by cmd/cgo; DO NOT EDIT.

//line /mnt/c/Users/M. Saif/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.1.2/handle.go:1:1
// handle.go - libalpm handle type and methods.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

// Package alpm implements Go bindings to the libalpm library used by Pacman,
// the Arch Linux package manager. Libalpm allows the creation of custom front
// ends to the Arch Linux package ecosystem.
//
// Libalpm does not include support for the Arch User Repository (AUR).
package alpm

// #include <alpm.h>
// #include <stdio.h> //C.free
// #include <fnmatch.h> //C.FNM_NOMATCH
import _ "unsafe"

import (
	"unsafe"
)

// Handle contains the pointer to the alpm handle
type Handle struct {
	ptr * /*line :25:7*/_Ctype_alpm_handle_t /*line :25:22*/
}

//
// alpm options getters and setters
//

// helper functions for wrapping list_t getters and setters
func (h *Handle) optionGetList(f func(* /*line :33:40*/_Ctype_alpm_handle_t /*line :33:55*/) * /*line :33:58*/_Ctype_alpm_list_t /*line :33:71*/) (StringList, error) {
	alpmList := f(h.ptr)
	goList := StringList{(*list)(unsafe.Pointer(alpmList))}

	if alpmList == nil {
		return goList, h.LastError()
	}

	return goList, nil
}

func (h *Handle) optionSetList(hookDirs []string, f func(* /*line :44:59*/_Ctype_alpm_handle_t /*line :44:74*/, * /*line :44:77*/_Ctype_alpm_list_t /*line :44:90*/)  /*line :44:92*/_Ctype_int /*line :44:97*/) error {
	var cList * /*line :45:13*/_Ctype_alpm_list_t /*line :45:26*/

	for _, dir := range hookDirs {
		cDir := unsafe.Pointer(( /*line :48:26*/_Cfunc_CString /*line :48:34*/)(dir))
		cList = func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :49:27*/cList; _cgo1 := /*line :49:34*/cDir; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :49:39*/_Cfunc_alpm_list_add(_cgo0, _cgo1); }()
	}

	if ok := f(h.ptr, cList); ok < 0 {
		return h.LastError()
	}

	goList := (*list)(unsafe.Pointer(cList))

	return goList.forEach(func(p unsafe.Pointer) error {
		func() { _cgo0 := /*line :59:10*/p; _cgoCheckPointer(_cgo0, nil); /*line :59:12*/_Cfunc_free(_cgo0); }()
		return nil
	})
}

func (h *Handle) optionAddList(hookDir string, f func(* /*line :64:56*/_Ctype_alpm_handle_t /*line :64:71*/, * /*line :64:74*/_Ctype_char /*line :64:80*/)  /*line :64:82*/_Ctype_int /*line :64:87*/) error {
	cHookDir := ( /*line :65:14*/_Cfunc_CString /*line :65:22*/)(hookDir)

	defer func() func() { _cgo0 := /*line :67:15*/unsafe.Pointer(cHookDir); return func() { _cgoCheckPointer(_cgo0, nil); /*line :67:40*/_Cfunc_free(_cgo0); }}()()

	if ok := f(h.ptr, cHookDir); ok < 0 {
		return h.LastError()
	}

	return nil
}

func (h *Handle) optionRemoveList(dir string, f func(* /*line :76:55*/_Ctype_alpm_handle_t /*line :76:70*/, * /*line :76:73*/_Ctype_char /*line :76:79*/)  /*line :76:81*/_Ctype_int /*line :76:86*/) (bool, error) {
	cDir := ( /*line :77:10*/_Cfunc_CString /*line :77:18*/)(dir)

	defer func() func() { _cgo0 := /*line :79:15*/unsafe.Pointer(cDir); return func() { _cgoCheckPointer(_cgo0, nil); /*line :79:36*/_Cfunc_free(_cgo0); }}()()

	ok := f(h.ptr, cDir)
	if ok < 0 {
		return false, h.LastError()
	}

	return ok == 1, nil
}

func (h *Handle) optionMatchList(dir string, f func(* /*line :89:54*/_Ctype_alpm_handle_t /*line :89:69*/, * /*line :89:72*/_Ctype_char /*line :89:78*/)  /*line :89:80*/_Ctype_int /*line :89:85*/) (bool, error) {
	cDir := ( /*line :90:10*/_Cfunc_CString /*line :90:18*/)(dir)

	defer func() func() { _cgo0 := /*line :92:15*/unsafe.Pointer(cDir); return func() { _cgoCheckPointer(_cgo0, nil); /*line :92:36*/_Cfunc_free(_cgo0); }}()()

	if ok := f(h.ptr, cDir); ok == 0 {
		return true, nil
	} else if ok == ( /*line :96:18*/_Ciconst_FNM_NOMATCH /*line :96:30*/) {
		return false, h.LastError()
	}

	return false, nil
}

// helper functions for *char based getters and setters
func (h *Handle) optionGetStr(f func(* /*line :104:39*/_Ctype_alpm_handle_t /*line :104:54*/) * /*line :104:57*/_Ctype_char /*line :104:63*/) (string, error) {
	cStr := f(h.ptr)
	str := ( /*line :106:9*/_Cfunc_GoString /*line :106:18*/)(cStr)

	defer func() func() { _cgo0 := /*line :108:15*/unsafe.Pointer(cStr); return func() { _cgoCheckPointer(_cgo0, nil); /*line :108:36*/_Cfunc_free(_cgo0); }}()()

	if cStr == nil {
		return str, h.LastError()
	}

	return str, nil
}

func (h *Handle) optionSetStr(str string, f func(* /*line :117:51*/_Ctype_alpm_handle_t /*line :117:66*/, * /*line :117:69*/_Ctype_char /*line :117:75*/)  /*line :117:77*/_Ctype_int /*line :117:82*/) error {
	cStr := ( /*line :118:10*/_Cfunc_CString /*line :118:18*/)(str)

	defer func() func() { _cgo0 := /*line :120:15*/unsafe.Pointer(cStr); return func() { _cgoCheckPointer(_cgo0, nil); /*line :120:36*/_Cfunc_free(_cgo0); }}()()

	if ok := f(h.ptr, cStr); ok < 0 {
		return h.LastError()
	}

	return nil
}

//
// end of helpers
//

func (h *Handle) Root() (string, error) {
	return h.optionGetStr(func(handle * /*line :134:37*/_Ctype_alpm_handle_t /*line :134:52*/) * /*line :134:55*/_Ctype_char /*line :134:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :135:33*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :135:40*/_Cfunc_alpm_option_get_root(_cgo0); }()
	})
}

func (h *Handle) DBPath() (string, error) {
	return h.optionGetStr(func(handle * /*line :140:37*/_Ctype_alpm_handle_t /*line :140:52*/) * /*line :140:55*/_Ctype_char /*line :140:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :141:35*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :141:42*/_Cfunc_alpm_option_get_dbpath(_cgo0); }()
	})
}

func (h *Handle) Lockfile() (string, error) {
	return h.optionGetStr(func(handle * /*line :146:37*/_Ctype_alpm_handle_t /*line :146:52*/) * /*line :146:55*/_Ctype_char /*line :146:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :147:37*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :147:44*/_Cfunc_alpm_option_get_lockfile(_cgo0); }()
	})
}

func (h *Handle) CacheDirs() (StringList, error) {
	return h.optionGetList(func(handle * /*line :152:38*/_Ctype_alpm_handle_t /*line :152:53*/) * /*line :152:56*/_Ctype_alpm_list_t /*line :152:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :153:38*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :153:45*/_Cfunc_alpm_option_get_cachedirs(_cgo0); }()
	})
}

func (h *Handle) AddCacheDir(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :158:47*/_Ctype_alpm_handle_t /*line :158:62*/, str * /*line :158:69*/_Ctype_char /*line :158:75*/)  /*line :158:77*/_Ctype_int /*line :158:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :159:37*/handle; var _cgo1 *_Ctype_char = /*line :159:45*/str; _cgoCheckPointer(_cgo0, nil); return /*line :159:49*/_Cfunc_alpm_option_add_cachedir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetCacheDirs(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :164:48*/_Ctype_alpm_handle_t /*line :164:63*/, l * /*line :164:68*/_Ctype_alpm_list_t /*line :164:81*/)  /*line :164:83*/_Ctype_int /*line :164:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :165:38*/handle; _cgo1 := /*line :165:46*/l; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :165:48*/_Cfunc_alpm_option_set_cachedirs(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveCacheDir(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :170:46*/_Ctype_alpm_handle_t /*line :170:61*/, str * /*line :170:68*/_Ctype_char /*line :170:74*/)  /*line :170:76*/_Ctype_int /*line :170:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :171:40*/handle; var _cgo1 *_Ctype_char = /*line :171:48*/str; _cgoCheckPointer(_cgo0, nil); return /*line :171:52*/_Cfunc_alpm_option_remove_cachedir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) HookDirs() (StringList, error) {
	return h.optionGetList(func(handle * /*line :176:38*/_Ctype_alpm_handle_t /*line :176:53*/) * /*line :176:56*/_Ctype_alpm_list_t /*line :176:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :177:37*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :177:44*/_Cfunc_alpm_option_get_hookdirs(_cgo0); }()
	})
}

func (h *Handle) AddHookDir(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :182:47*/_Ctype_alpm_handle_t /*line :182:62*/, str * /*line :182:69*/_Ctype_char /*line :182:75*/)  /*line :182:77*/_Ctype_int /*line :182:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :183:36*/handle; var _cgo1 *_Ctype_char = /*line :183:44*/str; _cgoCheckPointer(_cgo0, nil); return /*line :183:48*/_Cfunc_alpm_option_add_hookdir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetHookDirs(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :188:48*/_Ctype_alpm_handle_t /*line :188:63*/, l * /*line :188:68*/_Ctype_alpm_list_t /*line :188:81*/)  /*line :188:83*/_Ctype_int /*line :188:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :189:37*/handle; _cgo1 := /*line :189:45*/l; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :189:47*/_Cfunc_alpm_option_set_hookdirs(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveHookDir(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :194:46*/_Ctype_alpm_handle_t /*line :194:61*/, str * /*line :194:68*/_Ctype_char /*line :194:74*/)  /*line :194:76*/_Ctype_int /*line :194:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :195:39*/handle; var _cgo1 *_Ctype_char = /*line :195:47*/str; _cgoCheckPointer(_cgo0, nil); return /*line :195:51*/_Cfunc_alpm_option_remove_hookdir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) LogFile() (string, error) {
	return h.optionGetStr(func(handle * /*line :200:37*/_Ctype_alpm_handle_t /*line :200:52*/) * /*line :200:55*/_Ctype_char /*line :200:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :201:36*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :201:43*/_Cfunc_alpm_option_get_logfile(_cgo0); }()
	})
}

func (h *Handle) SetLogFile(str string) error {
	return h.optionSetStr(str, func(handle * /*line :206:42*/_Ctype_alpm_handle_t /*line :206:57*/, c_str * /*line :206:66*/_Ctype_char /*line :206:72*/)  /*line :206:74*/_Ctype_int /*line :206:79*/ {
		return func() _Ctype_int{ _cgo0 := /*line :207:36*/handle; var _cgo1 *_Ctype_char = /*line :207:44*/c_str; _cgoCheckPointer(_cgo0, nil); return /*line :207:50*/_Cfunc_alpm_option_set_logfile(_cgo0, _cgo1); }()
	})
}

func (h *Handle) GPGDir() (string, error) {
	return h.optionGetStr(func(handle * /*line :212:37*/_Ctype_alpm_handle_t /*line :212:52*/) * /*line :212:55*/_Ctype_char /*line :212:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :213:35*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :213:42*/_Cfunc_alpm_option_get_gpgdir(_cgo0); }()
	})
}

func (h *Handle) SetGPGDir(str string) error {
	return h.optionSetStr(str, func(handle * /*line :218:42*/_Ctype_alpm_handle_t /*line :218:57*/, c_str * /*line :218:66*/_Ctype_char /*line :218:72*/)  /*line :218:74*/_Ctype_int /*line :218:79*/ {
		return func() _Ctype_int{ _cgo0 := /*line :219:35*/handle; var _cgo1 *_Ctype_char = /*line :219:43*/c_str; _cgoCheckPointer(_cgo0, nil); return /*line :219:49*/_Cfunc_alpm_option_set_gpgdir(_cgo0, _cgo1); }()
	})
}

func (h *Handle) UseSyslog() (bool, error) {
	ok := func() _Ctype_int{ _cgo0 := /*line :224:36*/h.ptr; _cgoCheckPointer(_cgo0, nil); return /*line :224:42*/_Cfunc_alpm_option_get_usesyslog(_cgo0); }()

	if ok > 0 {
		return true, nil
	}

	if ok < 0 {
		return false, h.LastError()
	}

	return false, nil
}

func (h *Handle) SetUseSyslog(value bool) error {
	var intValue  /*line :238:15*/_Ctype_int /*line :238:20*/
	if value {
		intValue = 1
	}

	if ok := func() _Ctype_int{ _cgo0 := /*line :243:39*/h.ptr; var _cgo1 _Ctype_int = /*line :243:46*/intValue; _cgoCheckPointer(_cgo0, nil); return /*line :243:55*/_Cfunc_alpm_option_set_usesyslog(_cgo0, _cgo1); }(); ok < 0 {
		return h.LastError()
	}

	return nil
}

func (h *Handle) NoUpgrades() (StringList, error) {
	return h.optionGetList(func(handle * /*line :251:38*/_Ctype_alpm_handle_t /*line :251:53*/) * /*line :251:56*/_Ctype_alpm_list_t /*line :251:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :252:39*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :252:46*/_Cfunc_alpm_option_get_noupgrades(_cgo0); }()
	})
}

func (h *Handle) AddNoUpgrade(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :257:47*/_Ctype_alpm_handle_t /*line :257:62*/, str * /*line :257:69*/_Ctype_char /*line :257:75*/)  /*line :257:77*/_Ctype_int /*line :257:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :258:38*/handle; var _cgo1 *_Ctype_char = /*line :258:46*/str; _cgoCheckPointer(_cgo0, nil); return /*line :258:50*/_Cfunc_alpm_option_add_noupgrade(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetNoUpgrades(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :263:48*/_Ctype_alpm_handle_t /*line :263:63*/, l * /*line :263:68*/_Ctype_alpm_list_t /*line :263:81*/)  /*line :263:83*/_Ctype_int /*line :263:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :264:39*/handle; _cgo1 := /*line :264:47*/l; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :264:49*/_Cfunc_alpm_option_set_noupgrades(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveNoUpgrade(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :269:46*/_Ctype_alpm_handle_t /*line :269:61*/, str * /*line :269:68*/_Ctype_char /*line :269:74*/)  /*line :269:76*/_Ctype_int /*line :269:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :270:41*/handle; var _cgo1 *_Ctype_char = /*line :270:49*/str; _cgoCheckPointer(_cgo0, nil); return /*line :270:53*/_Cfunc_alpm_option_remove_noupgrade(_cgo0, _cgo1); }()
	})
}

func (h *Handle) MatchNoUpgrade(dir string) (bool, error) {
	return h.optionMatchList(dir, func(handle * /*line :275:45*/_Ctype_alpm_handle_t /*line :275:60*/, str * /*line :275:67*/_Ctype_char /*line :275:73*/)  /*line :275:75*/_Ctype_int /*line :275:80*/ {
		return func() _Ctype_int{ _cgo0 := /*line :276:40*/handle; var _cgo1 *_Ctype_char = /*line :276:48*/str; _cgoCheckPointer(_cgo0, nil); return /*line :276:52*/_Cfunc_alpm_option_match_noupgrade(_cgo0, _cgo1); }()
	})
}

func (h *Handle) NoExtracts() (StringList, error) {
	return h.optionGetList(func(handle * /*line :281:38*/_Ctype_alpm_handle_t /*line :281:53*/) * /*line :281:56*/_Ctype_alpm_list_t /*line :281:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :282:39*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :282:46*/_Cfunc_alpm_option_get_noextracts(_cgo0); }()
	})
}

func (h *Handle) AddNoExtract(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :287:47*/_Ctype_alpm_handle_t /*line :287:62*/, str * /*line :287:69*/_Ctype_char /*line :287:75*/)  /*line :287:77*/_Ctype_int /*line :287:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :288:38*/handle; var _cgo1 *_Ctype_char = /*line :288:46*/str; _cgoCheckPointer(_cgo0, nil); return /*line :288:50*/_Cfunc_alpm_option_add_noextract(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetNoExtracts(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :293:48*/_Ctype_alpm_handle_t /*line :293:63*/, l * /*line :293:68*/_Ctype_alpm_list_t /*line :293:81*/)  /*line :293:83*/_Ctype_int /*line :293:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :294:39*/handle; _cgo1 := /*line :294:47*/l; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :294:49*/_Cfunc_alpm_option_set_noextracts(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveNoExtract(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :299:46*/_Ctype_alpm_handle_t /*line :299:61*/, str * /*line :299:68*/_Ctype_char /*line :299:74*/)  /*line :299:76*/_Ctype_int /*line :299:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :300:41*/handle; var _cgo1 *_Ctype_char = /*line :300:49*/str; _cgoCheckPointer(_cgo0, nil); return /*line :300:53*/_Cfunc_alpm_option_remove_noextract(_cgo0, _cgo1); }()
	})
}

func (h *Handle) MatchNoExtract(dir string) (bool, error) {
	return h.optionMatchList(dir, func(handle * /*line :305:45*/_Ctype_alpm_handle_t /*line :305:60*/, str * /*line :305:67*/_Ctype_char /*line :305:73*/)  /*line :305:75*/_Ctype_int /*line :305:80*/ {
		return func() _Ctype_int{ _cgo0 := /*line :306:40*/handle; var _cgo1 *_Ctype_char = /*line :306:48*/str; _cgoCheckPointer(_cgo0, nil); return /*line :306:52*/_Cfunc_alpm_option_match_noextract(_cgo0, _cgo1); }()
	})
}

func (h *Handle) IgnorePkgs() (StringList, error) {
	return h.optionGetList(func(handle * /*line :311:38*/_Ctype_alpm_handle_t /*line :311:53*/) * /*line :311:56*/_Ctype_alpm_list_t /*line :311:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :312:39*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :312:46*/_Cfunc_alpm_option_get_ignorepkgs(_cgo0); }()
	})
}

func (h *Handle) AddIgnorePkg(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :317:47*/_Ctype_alpm_handle_t /*line :317:62*/, str * /*line :317:69*/_Ctype_char /*line :317:75*/)  /*line :317:77*/_Ctype_int /*line :317:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :318:38*/handle; var _cgo1 *_Ctype_char = /*line :318:46*/str; _cgoCheckPointer(_cgo0, nil); return /*line :318:50*/_Cfunc_alpm_option_add_ignorepkg(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetIgnorePkgs(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :323:48*/_Ctype_alpm_handle_t /*line :323:63*/, l * /*line :323:68*/_Ctype_alpm_list_t /*line :323:81*/)  /*line :323:83*/_Ctype_int /*line :323:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :324:39*/handle; _cgo1 := /*line :324:47*/l; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :324:49*/_Cfunc_alpm_option_set_ignorepkgs(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveIgnorePkg(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :329:46*/_Ctype_alpm_handle_t /*line :329:61*/, str * /*line :329:68*/_Ctype_char /*line :329:74*/)  /*line :329:76*/_Ctype_int /*line :329:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :330:41*/handle; var _cgo1 *_Ctype_char = /*line :330:49*/str; _cgoCheckPointer(_cgo0, nil); return /*line :330:53*/_Cfunc_alpm_option_remove_ignorepkg(_cgo0, _cgo1); }()
	})
}

func (h *Handle) IgnoreGroups() (StringList, error) {
	return h.optionGetList(func(handle * /*line :335:38*/_Ctype_alpm_handle_t /*line :335:53*/) * /*line :335:56*/_Ctype_alpm_list_t /*line :335:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :336:41*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :336:48*/_Cfunc_alpm_option_get_ignoregroups(_cgo0); }()
	})
}

func (h *Handle) AddIgnoreGroup(hookDir string) error {
	return h.optionAddList(hookDir, func(handle * /*line :341:47*/_Ctype_alpm_handle_t /*line :341:62*/, str * /*line :341:69*/_Ctype_char /*line :341:75*/)  /*line :341:77*/_Ctype_int /*line :341:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :342:40*/handle; var _cgo1 *_Ctype_char = /*line :342:48*/str; _cgoCheckPointer(_cgo0, nil); return /*line :342:52*/_Cfunc_alpm_option_add_ignoregroup(_cgo0, _cgo1); }()
	})
}

func (h *Handle) SetIgnoreGroups(hookDirs []string) error {
	return h.optionSetList(hookDirs, func(handle * /*line :347:48*/_Ctype_alpm_handle_t /*line :347:63*/, l * /*line :347:68*/_Ctype_alpm_list_t /*line :347:81*/)  /*line :347:83*/_Ctype_int /*line :347:88*/ {
		return func() _Ctype_int{ _cgo0 := /*line :348:41*/handle; _cgo1 := /*line :348:49*/l; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :348:51*/_Cfunc_alpm_option_set_ignoregroups(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveIgnoreGroup(dir string) (bool, error) {
	return h.optionRemoveList(dir, func(handle * /*line :353:46*/_Ctype_alpm_handle_t /*line :353:61*/, str * /*line :353:68*/_Ctype_char /*line :353:74*/)  /*line :353:76*/_Ctype_int /*line :353:81*/ {
		return func() _Ctype_int{ _cgo0 := /*line :354:43*/handle; var _cgo1 *_Ctype_char = /*line :354:51*/str; _cgoCheckPointer(_cgo0, nil); return /*line :354:55*/_Cfunc_alpm_option_remove_ignoregroup(_cgo0, _cgo1); }()
	})
}

/*func (h *Handle) optionGetList(f func(*C.alpm_handle_t) *C.alpm_list_t) (StringList, error){
	alpmList := f(h.ptr)
	goList := StringList{(*list)(unsafe.Pointer(alpmList))}

	if alpmList == nil {
		return goList, h.LastError()
	}
	return goList, nil
}*/

// use alpm_depend_t
func (h *Handle) AssumeInstalled() (DependList, error) {
	alpmList := func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :370:48*/h.ptr; _cgoCheckPointer(_cgo0, nil); return /*line :370:54*/_Cfunc_alpm_option_get_assumeinstalled(_cgo0); }()
	depList := DependList{(*list)(unsafe.Pointer(alpmList))}

	if alpmList == nil {
		return depList, h.LastError()
	}

	return depList, nil
}

func (h *Handle) AddAssumeInstalled(dep Depend) error {
	cDep := convertCDepend(dep)
	defer freeCDepend(cDep)

	if ok := func() _Ctype_int{ _cgo0 := /*line :384:45*/h.ptr; _cgo1 := /*line :384:52*/cDep; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :384:57*/_Cfunc_alpm_option_add_assumeinstalled(_cgo0, _cgo1); }(); ok < 0 {
		return h.LastError()
	}

	return nil
}

// LocalDB returns the local database relative to the given handle.
func (h *Handle) LocalDB() (IDB, error) {
	db := func() *_Ctype_struct___alpm_db_t{ _cgo0 := /*line :393:27*/h.ptr; _cgoCheckPointer(_cgo0, nil); return /*line :393:33*/_Cfunc_alpm_get_localdb(_cgo0); }()
	if db == nil {
		return nil, h.LastError()
	}

	return &DB{db, *h}, nil
}

// SyncDBs returns list of Synced DBs.
func (h *Handle) SyncDBs() (IDBList, error) {
	dblist := func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :403:31*/h.ptr; _cgoCheckPointer(_cgo0, nil); return /*line :403:37*/_Cfunc_alpm_get_syncdbs(_cgo0); }()
	if dblist == nil {
		return &DBList{nil, *h}, h.LastError()
	}

	return &DBList{(*list)(unsafe.Pointer(dblist)), *h}, nil
}

func (h *Handle) CheckSpace() (bool, error) {
	ok := func() _Ctype_int{ _cgo0 := /*line :412:37*/h.ptr; _cgoCheckPointer(_cgo0, nil); return /*line :412:43*/_Cfunc_alpm_option_get_checkspace(_cgo0); }()

	if ok > 0 {
		return true, nil
	}

	if ok < 0 {
		return false, h.LastError()
	}

	return false, nil
}

func (h *Handle) SetCheckSpace(value bool) error {
	var cValue  /*line :426:13*/_Ctype_int /*line :426:18*/
	if value {
		cValue = 1
	}

	if ok := func() _Ctype_int{ _cgo0 := /*line :431:40*/h.ptr; var _cgo1 _Ctype_int = /*line :431:47*/cValue; _cgoCheckPointer(_cgo0, nil); return /*line :431:54*/_Cfunc_alpm_option_set_checkspace(_cgo0, _cgo1); }(); ok < 0 {
		return h.LastError()
	}

	return nil
}

func (h *Handle) DBExt() (string, error) {
	return h.optionGetStr(func(handle * /*line :439:37*/_Ctype_alpm_handle_t /*line :439:52*/) * /*line :439:55*/_Ctype_char /*line :439:61*/ {
		return func() *_Ctype_char{ _cgo0 := /*line :440:34*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :440:41*/_Cfunc_alpm_option_get_dbext(_cgo0); }()
	})
}

func (h *Handle) SetDBExt(str string) error {
	return h.optionSetStr(str, func(handle * /*line :445:42*/_Ctype_alpm_handle_t /*line :445:57*/, cStr * /*line :445:65*/_Ctype_char /*line :445:71*/)  /*line :445:73*/_Ctype_int /*line :445:78*/ {
		return func() _Ctype_int{ _cgo0 := /*line :446:34*/handle; var _cgo1 *_Ctype_char = /*line :446:42*/cStr; _cgoCheckPointer(_cgo0, nil); return /*line :446:47*/_Cfunc_alpm_option_set_dbext(_cgo0, _cgo1); }()
	})
}

func (h *Handle) GetDefaultSigLevel() (SigLevel, error) {
	sigLevel := func() _Ctype_int{ _cgo0 := /*line :451:49*/h.ptr; _cgoCheckPointer(_cgo0, nil); return /*line :451:55*/_Cfunc_alpm_option_get_default_siglevel(_cgo0); }()

	if sigLevel < 0 {
		return SigLevel(sigLevel), h.LastError()
	}

	return SigLevel(sigLevel), nil
}

func (h *Handle) SetDefaultSigLevel(siglevel SigLevel) error {
	if ok := func() _Ctype_int{ _cgo0 := /*line :461:46*/h.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :461:58*/(siglevel); _cgoCheckPointer(_cgo0, nil); return /*line :461:69*/_Cfunc_alpm_option_set_default_siglevel(_cgo0, _cgo1); }(); ok < 0 {
		return h.LastError()
	}

	return nil
}

func (h *Handle) GetLocalFileSigLevel() (SigLevel, error) {
	sigLevel := func() _Ctype_int{ _cgo0 := /*line :469:52*/h.ptr; _cgoCheckPointer(_cgo0, nil); return /*line :469:58*/_Cfunc_alpm_option_get_local_file_siglevel(_cgo0); }()

	if sigLevel < 0 {
		return SigLevel(sigLevel), h.LastError()
	}

	return SigLevel(sigLevel), nil
}

func (h *Handle) SetLocalFileSigLevel(siglevel SigLevel) error {
	if ok := func() _Ctype_int{ _cgo0 := /*line :479:49*/h.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :479:61*/(siglevel); _cgoCheckPointer(_cgo0, nil); return /*line :479:72*/_Cfunc_alpm_option_set_local_file_siglevel(_cgo0, _cgo1); }(); ok < 0 {
		return h.LastError()
	}

	return nil
}

func (h *Handle) GetRemoteFileSigLevel() (SigLevel, error) {
	sigLevel := func() _Ctype_int{ _cgo0 := /*line :487:53*/h.ptr; _cgoCheckPointer(_cgo0, nil); return /*line :487:59*/_Cfunc_alpm_option_get_remote_file_siglevel(_cgo0); }()
	if sigLevel < 0 {
		return SigLevel(sigLevel), h.LastError()
	}

	return SigLevel(sigLevel), nil
}

func (h *Handle) SetRemoteFileSigLevel(siglevel SigLevel) error {
	if ok := func() _Ctype_int{ _cgo0 := /*line :496:50*/h.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :496:62*/(siglevel); _cgoCheckPointer(_cgo0, nil); return /*line :496:73*/_Cfunc_alpm_option_set_remote_file_siglevel(_cgo0, _cgo1); }(); ok < 0 {
		return h.LastError()
	}

	return nil
}

func (h *Handle) GetArchitectures() (StringList, error) {
	return h.optionGetList(func(handle * /*line :504:38*/_Ctype_alpm_handle_t /*line :504:53*/) * /*line :504:56*/_Ctype_alpm_list_t /*line :504:69*/ {
		return func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :505:42*/handle; _cgoCheckPointer(_cgo0, nil); return /*line :505:49*/_Cfunc_alpm_option_get_architectures(_cgo0); }()
	})
}

func (h *Handle) SetArchitectures(str []string) error {
	return h.optionSetList(str, func(handle * /*line :510:43*/_Ctype_alpm_handle_t /*line :510:58*/, l * /*line :510:63*/_Ctype_alpm_list_t /*line :510:76*/)  /*line :510:78*/_Ctype_int /*line :510:83*/ {
		return func() _Ctype_int{ _cgo0 := /*line :511:42*/handle; _cgo1 := /*line :511:50*/l; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :511:52*/_Cfunc_alpm_option_set_architectures(_cgo0, _cgo1); }()
	})
}

func (h *Handle) AddArchitecture(str string) error {
	return h.optionAddList(str, func(handle * /*line :516:43*/_Ctype_alpm_handle_t /*line :516:58*/, cStr * /*line :516:66*/_Ctype_char /*line :516:72*/)  /*line :516:74*/_Ctype_int /*line :516:79*/ {
		return func() _Ctype_int{ _cgo0 := /*line :517:41*/handle; var _cgo1 *_Ctype_char = /*line :517:49*/cStr; _cgoCheckPointer(_cgo0, nil); return /*line :517:54*/_Cfunc_alpm_option_add_architecture(_cgo0, _cgo1); }()
	})
}

func (h *Handle) RemoveArchitecture(str string) (bool, error) {
	return h.optionRemoveList(str, func(handle * /*line :522:46*/_Ctype_alpm_handle_t /*line :522:61*/, cStr * /*line :522:69*/_Ctype_char /*line :522:75*/)  /*line :522:77*/_Ctype_int /*line :522:82*/ {
		return func() _Ctype_int{ _cgo0 := /*line :523:44*/handle; var _cgo1 *_Ctype_char = /*line :523:52*/cStr; _cgoCheckPointer(_cgo0, nil); return /*line :523:57*/_Cfunc_alpm_option_remove_architecture(_cgo0, _cgo1); }()
	})
}
