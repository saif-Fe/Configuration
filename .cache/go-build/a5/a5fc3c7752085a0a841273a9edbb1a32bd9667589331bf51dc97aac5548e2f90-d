// Code generated by cmd/cgo; DO NOT EDIT.

//line /mnt/c/Users/M. Saif/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.1.2/package_six.go:1:1
//go:build !next
// +build !next

// package.go - libalpm package type and methods.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm

/*
#include <alpm.h>

int pkg_cmp(const void *v1, const void *v2)
{
    alpm_pkg_t *p1 = (alpm_pkg_t *)v1;
    alpm_pkg_t *p2 = (alpm_pkg_t *)v2;
    off_t s1 = alpm_pkg_get_isize(p1);
    off_t s2 = alpm_pkg_get_isize(p2);

    if (s1 > s2)
        return -1;
    else if (s1 < s2)
        return 1;
    else
        return 0;
}
*/
import _ "unsafe"

import (
	"unsafe"
)

// SortBySize returns a PackageList sorted by size.
func (l PackageList) SortBySize() IPackageList {
	pkgList := (* /*line :38:15*/_Ctype_struct___alpm_list_t /*line :38:37*/)(unsafe.Pointer(l.list))

	pkgCache := (*list)(unsafe.Pointer(
		func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :41:21*/pkgList; var _cgo1 _Ctype_size_t = func() _Ctype_size_t{ _cgo0 := /*line :42:22*/pkgList; _cgoCheckPointer(_cgo0, nil); return /*line :42:30*/_Cfunc_alpm_list_count(_cgo0); }(); var _cgo2 *[0]byte = _Ctype_alpm_list_fn_cmp /*line :43:22*/(_Cgo_ptr(_Cfpvar_fp_pkg_cmp /*line :43:32*/)); _cgoCheckPointer(_cgo0, nil); return /*line :43:34*/_Cfunc_alpm_list_msort(_cgo0, _cgo1, _cgo2); }()))
	if pkgCache == nil {
		return nil
	}

	return PackageList{pkgCache, l.handle}
}
