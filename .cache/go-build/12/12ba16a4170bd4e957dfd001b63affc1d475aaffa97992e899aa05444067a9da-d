// Code generated by cmd/cgo; DO NOT EDIT.

//line /mnt/c/Users/M. Saif/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.1.2/deps.go:1:1
//go:build !next
// +build !next

package alpm

/*
#include <alpm.h>
*/
import _ "unsafe"

import (
	"fmt"
	"unsafe"
)

// FindSatisfier searches a DBList for a package that satisfies depstring
// Example "glibc>=2.12"
func (l DBList) FindSatisfier(depstring string) (IPackage, error) {
	cDepString := ( /*line :19:16*/_Cfunc_CString /*line :19:24*/)(depstring)

	defer func() func() { _cgo0 := /*line :21:15*/unsafe.Pointer(cDepString); return func() { _cgoCheckPointer(_cgo0, nil); /*line :21:42*/_Cfunc_free(_cgo0); }}()()

	pkgList := (* /*line :23:15*/_Ctype_struct___alpm_list_t /*line :23:37*/)(unsafe.Pointer(l.list))
	pkgHandle := (* /*line :24:17*/_Ctype_struct___alpm_handle_t /*line :24:41*/)(unsafe.Pointer(l.handle.ptr))

	ptr := func() *_Ctype_struct___alpm_pkg_t{ _cgo0 := /*line :26:35*/pkgHandle; _cgo1 := /*line :26:46*/pkgList; var _cgo2 *_Ctype_char = /*line :26:55*/cDepString; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :26:66*/_Cfunc_alpm_find_dbs_satisfier(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil,
			fmt.Errorf("unable to satisfy dependency %s in DBlist", depstring)
	}

	return &Package{ptr, l.handle}, nil
}

// FindSatisfier finds a package that satisfies depstring from PkgList
func (l PackageList) FindSatisfier(depstring string) (IPackage, error) {
	cDepString := ( /*line :37:16*/_Cfunc_CString /*line :37:24*/)(depstring)

	defer func() func() { _cgo0 := /*line :39:15*/unsafe.Pointer(cDepString); return func() { _cgoCheckPointer(_cgo0, nil); /*line :39:42*/_Cfunc_free(_cgo0); }}()()

	pkgList := (* /*line :41:15*/_Ctype_struct___alpm_list_t /*line :41:37*/)(unsafe.Pointer(l.list))

	ptr := func() *_Ctype_struct___alpm_pkg_t{ _cgo0 := /*line :43:31*/pkgList; var _cgo1 *_Ctype_char = /*line :43:40*/cDepString; _cgoCheckPointer(_cgo0, nil); return /*line :43:51*/_Cfunc_alpm_find_satisfier(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil,
			fmt.Errorf("unable to find dependency %s in PackageList", depstring)
	}

	return &Package{ptr, l.handle}, nil
}
