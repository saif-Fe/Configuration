// Code generated by cmd/cgo; DO NOT EDIT.

//line /mnt/c/Users/M. Saif/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.1.2/package.go:1:1
// package.go - libalpm package type and methods.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm

/*
#include <alpm.h>
*/
import _ "unsafe"

import (
	"time"
	"unsafe"
)

// Package describes a single package and associated handle.
type Package struct {
	pmpkg  * /*line :21:10*/_Ctype_alpm_pkg_t /*line :21:22*/
	handle Handle
}

// PackageList describes a linked list of packages and associated handle.
type PackageList struct {
	*list
	handle Handle
}

// ForEach executes an action on each package of the PackageList.
func (l PackageList) ForEach(f func(IPackage) error) error {
	return l.forEach(func(p unsafe.Pointer) error {
		return f(&Package{(* /*line :34:23*/_Ctype_alpm_pkg_t /*line :34:35*/)(p), l.handle})
	})
}

// Slice converts the PackageList to a Package Slice.
func (l PackageList) Slice() []IPackage {
	slice := []IPackage{}
	_ = l.ForEach(func(p IPackage) error {
		slice = append(slice, p)
		return nil
	})

	return slice
}

// DependList describes a linkedlist of dependency type packages.
type DependList struct{ *list }

// ForEach executes an action on each package of the DependList.
func (l DependList) ForEach(f func(Depend) error) error {
	return l.forEach(func(p unsafe.Pointer) error {
		dep := convertDepend((* /*line :55:26*/_Ctype_alpm_depend_t /*line :55:41*/)(p))
		return f(dep)
	})
}

// Slice converts the DependList to a Depend Slice.
func (l DependList) Slice() []Depend {
	slice := []Depend{}
	_ = l.ForEach(func(dep Depend) error {
		slice = append(slice, dep)
		return nil
	})

	return slice
}

func (pkg *Package) FileName() string {
	return ( /*line :72:9*/_Cfunc_GoString /*line :72:18*/)(func() *_Ctype_char{ _cgo0 := /*line :72:44*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :72:54*/_Cfunc_alpm_pkg_get_filename(_cgo0); }())
}

func (pkg *Package) Base() string {
	return ( /*line :76:9*/_Cfunc_GoString /*line :76:18*/)(func() *_Ctype_char{ _cgo0 := /*line :76:40*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :76:50*/_Cfunc_alpm_pkg_get_base(_cgo0); }())
}

func (pkg *Package) Base64Signature() string {
	return ( /*line :80:9*/_Cfunc_GoString /*line :80:18*/)(func() *_Ctype_char{ _cgo0 := /*line :80:46*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :80:56*/_Cfunc_alpm_pkg_get_base64_sig(_cgo0); }())
}

func (pkg *Package) Validation() Validation {
	return Validation(func() _Ctype_int{ _cgo0 := /*line :84:46*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :84:56*/_Cfunc_alpm_pkg_get_validation(_cgo0); }())
}

// Architecture returns the package target Architecture.
func (pkg *Package) Architecture() string {
	return ( /*line :89:9*/_Cfunc_GoString /*line :89:18*/)(func() *_Ctype_char{ _cgo0 := /*line :89:40*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :89:50*/_Cfunc_alpm_pkg_get_arch(_cgo0); }())
}

// Backup returns a list of package backups.
func (pkg *Package) Backup() BackupList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :94:46*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :94:56*/_Cfunc_alpm_pkg_get_backup(_cgo0); }())
	return BackupList{(*list)(ptr)}
}

// BuildDate returns the BuildDate of the package.
func (pkg *Package) BuildDate() time.Time {
	t := func() _Ctype_alpm_time_t{ _cgo0 := /*line :100:32*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :100:42*/_Cfunc_alpm_pkg_get_builddate(_cgo0); }()
	return time.Unix(int64(t), 0)
}

// Conflicts returns the conflicts of the package as a DependList.
func (pkg *Package) Conflicts() DependList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :106:49*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :106:59*/_Cfunc_alpm_pkg_get_conflicts(_cgo0); }())
	return DependList{(*list)(ptr)}
}

// DB returns the package's origin database.
func (pkg *Package) DB() IDB {
	ptr := func() *_Ctype_struct___alpm_db_t{ _cgo0 := /*line :112:27*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :112:37*/_Cfunc_alpm_pkg_get_db(_cgo0); }()
	if ptr == nil {
		return nil
	}

	return &DB{ptr, pkg.handle}
}

// Depends returns the package's dependency list.
func (pkg *Package) Depends() DependList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :122:47*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :122:57*/_Cfunc_alpm_pkg_get_depends(_cgo0); }())
	return DependList{(*list)(ptr)}
}

// Depends returns the package's optional dependency list.
func (pkg *Package) OptionalDepends() DependList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :128:50*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :128:60*/_Cfunc_alpm_pkg_get_optdepends(_cgo0); }())
	return DependList{(*list)(ptr)}
}

// Depends returns the package's check dependency list.
func (pkg *Package) CheckDepends() DependList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :134:52*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :134:62*/_Cfunc_alpm_pkg_get_checkdepends(_cgo0); }())
	return DependList{(*list)(ptr)}
}

// Depends returns the package's make dependency list.
func (pkg *Package) MakeDepends() DependList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :140:51*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :140:61*/_Cfunc_alpm_pkg_get_makedepends(_cgo0); }())
	return DependList{(*list)(ptr)}
}

// Description returns the package's description.
func (pkg *Package) Description() string {
	return ( /*line :146:9*/_Cfunc_GoString /*line :146:18*/)(func() *_Ctype_char{ _cgo0 := /*line :146:40*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :146:50*/_Cfunc_alpm_pkg_get_desc(_cgo0); }())
}

// Files returns the file list of the package.
func (pkg *Package) Files() []File {
	cFiles := func() *_Ctype_struct__alpm_filelist_t{ _cgo0 := /*line :151:33*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :151:43*/_Cfunc_alpm_pkg_get_files(_cgo0); }()
	return convertFilelist(cFiles)
}

// ContainsFile checks if the path is in the package filelist
func (pkg *Package) ContainsFile(path string) (File, error) {
	return convertFile(func() *_Ctype_struct__alpm_file_t{ _cgo0 := func() *_Ctype_struct__alpm_filelist_t{ _cgo0 := /*line :157:67*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :157:77*/_Cfunc_alpm_pkg_get_files(_cgo0); }(); var _cgo1 *_Ctype_char = _Cfunc_CString /*line :157:88*/(path); _cgoCheckPointer(_cgo0, nil); return /*line :157:95*/_Cfunc_alpm_filelist_contains(_cgo0, _cgo1); }())
}

// Groups returns the groups the package belongs to.
func (pkg *Package) Groups() StringList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :162:46*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :162:56*/_Cfunc_alpm_pkg_get_groups(_cgo0); }())
	return StringList{(*list)(ptr)}
}

// ISize returns the package installed size.
func (pkg *Package) ISize() int64 {
	t := func() _Ctype_off_t{ _cgo0 := /*line :168:28*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :168:38*/_Cfunc_alpm_pkg_get_isize(_cgo0); }()
	return int64(t)
}

// InstallDate returns the package install date.
func (pkg *Package) InstallDate() time.Time {
	t := func() _Ctype_alpm_time_t{ _cgo0 := /*line :174:34*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :174:44*/_Cfunc_alpm_pkg_get_installdate(_cgo0); }()
	return time.Unix(int64(t), 0)
}

// Licenses returns the package license list.
func (pkg *Package) Licenses() StringList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :180:48*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :180:58*/_Cfunc_alpm_pkg_get_licenses(_cgo0); }())
	return StringList{(*list)(ptr)}
}

// SHA256Sum returns package SHA256Sum.
func (pkg *Package) SHA256Sum() string {
	return ( /*line :186:9*/_Cfunc_GoString /*line :186:18*/)(func() *_Ctype_char{ _cgo0 := /*line :186:45*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :186:55*/_Cfunc_alpm_pkg_get_sha256sum(_cgo0); }())
}

// MD5Sum returns package MD5Sum.
func (pkg *Package) MD5Sum() string {
	return ( /*line :191:9*/_Cfunc_GoString /*line :191:18*/)(func() *_Ctype_char{ _cgo0 := /*line :191:42*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :191:52*/_Cfunc_alpm_pkg_get_md5sum(_cgo0); }())
}

// Name returns package name.
func (pkg *Package) Name() string {
	return ( /*line :196:9*/_Cfunc_GoString /*line :196:18*/)(func() *_Ctype_char{ _cgo0 := /*line :196:40*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :196:50*/_Cfunc_alpm_pkg_get_name(_cgo0); }())
}

// Packager returns package packager name.
func (pkg *Package) Packager() string {
	return ( /*line :201:9*/_Cfunc_GoString /*line :201:18*/)(func() *_Ctype_char{ _cgo0 := /*line :201:44*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :201:54*/_Cfunc_alpm_pkg_get_packager(_cgo0); }())
}

// Provides returns DependList of packages provides by package.
func (pkg *Package) Provides() DependList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :206:48*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :206:58*/_Cfunc_alpm_pkg_get_provides(_cgo0); }())
	return DependList{(*list)(ptr)}
}

// Reason returns package install reason.
func (pkg *Package) Reason() PkgReason {
	reason := func() _Ctype_alpm_pkgreason_t{ _cgo0 := /*line :212:34*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :212:44*/_Cfunc_alpm_pkg_get_reason(_cgo0); }()
	return PkgReason(reason)
}

// Origin returns package origin.
func (pkg *Package) Origin() PkgFrom {
	origin := func() _Ctype_alpm_pkgfrom_t{ _cgo0 := /*line :218:34*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :218:44*/_Cfunc_alpm_pkg_get_origin(_cgo0); }()
	return PkgFrom(origin)
}

// Replaces returns a DependList with the packages this package replaces.
func (pkg *Package) Replaces() DependList {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :224:48*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :224:58*/_Cfunc_alpm_pkg_get_replaces(_cgo0); }())
	return DependList{(*list)(ptr)}
}

// Size returns the packed package size.
func (pkg *Package) Size() int64 {
	t := func() _Ctype_off_t{ _cgo0 := /*line :230:27*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :230:37*/_Cfunc_alpm_pkg_get_size(_cgo0); }()
	return int64(t)
}

// URL returns the upstream URL of the package.
func (pkg *Package) URL() string {
	return ( /*line :236:9*/_Cfunc_GoString /*line :236:18*/)(func() *_Ctype_char{ _cgo0 := /*line :236:39*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :236:49*/_Cfunc_alpm_pkg_get_url(_cgo0); }())
}

// Version returns the package version.
func (pkg *Package) Version() string {
	return ( /*line :241:9*/_Cfunc_GoString /*line :241:18*/)(func() *_Ctype_char{ _cgo0 := /*line :241:43*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :241:53*/_Cfunc_alpm_pkg_get_version(_cgo0); }())
}

// ComputeRequiredBy returns the names of reverse dependencies of a package
func (pkg *Package) ComputeRequiredBy() []string {
	result := func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :246:42*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :246:52*/_Cfunc_alpm_pkg_compute_requiredby(_cgo0); }()
	requiredby := make([]string, 0)

	for i := (*list)(unsafe.Pointer(result)); i != nil; i = i.Next {
		if i.Data != nil {
			name := ( /*line :251:12*/_Cfunc_GoString /*line :251:21*/)((* /*line :251:25*/_Ctype_char /*line :251:31*/)(i.Data))
			requiredby = append(requiredby, name)

			func() { _cgo0 := /*line :254:11*/i.Data; _cgoCheckPointer(_cgo0, nil); /*line :254:18*/_Cfunc_free(_cgo0); }()
		}

		func() { _cgo0 := /*line :257:10*/unsafe.Pointer(i); _cgoCheckPointer(_cgo0, nil); /*line :257:28*/_Cfunc_free(_cgo0); }()
	}

	return requiredby
}

// ComputeOptionalFor returns the names of packages that optionally require the given package
func (pkg *Package) ComputeOptionalFor() []string {
	result := func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :265:43*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); return /*line :265:53*/_Cfunc_alpm_pkg_compute_optionalfor(_cgo0); }()
	optionalfor := make([]string, 0)

	for i := (*list)(unsafe.Pointer(result)); i != nil; i = i.Next {
		if i.Data != nil {
			name := ( /*line :270:12*/_Cfunc_GoString /*line :270:21*/)((* /*line :270:25*/_Ctype_char /*line :270:31*/)(i.Data))
			optionalfor = append(optionalfor, name)

			func() { _cgo0 := /*line :273:11*/i.Data; _cgoCheckPointer(_cgo0, nil); /*line :273:18*/_Cfunc_free(_cgo0); }()
		}

		func() { _cgo0 := /*line :276:10*/unsafe.Pointer(i); _cgoCheckPointer(_cgo0, nil); /*line :276:28*/_Cfunc_free(_cgo0); }()
	}

	return optionalfor
}

func (pkg *Package) ShouldIgnore() bool {
	result := func() _Ctype_int{ _cgo0 := /*line :283:37*/pkg.handle.ptr; _cgo1 := /*line :283:53*/pkg.pmpkg; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return /*line :283:63*/_Cfunc_alpm_pkg_should_ignore(_cgo0, _cgo1); }()
	return result == 1
}

func (pkg *Package) Type() string {
	return "alpm"
}
